@base <http://purl.org/neao/base#> .
@prefix : <http://purl.org/neao/base#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix biro: <http://purl.org/spar/biro/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix vann: <http://purl.org/vocab/vann/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
# 
# 
# #################################################################
# #
# #    Annotation properties
# #
# #################################################################
# 
# 
# http://purl.org/dc/terms/created
# 
# http://purl.org/dc/terms/creator
# 
# http://purl.org/dc/terms/license
# 
# http://purl.org/neao/base#abbreviation
# 
# http://purl.org/neao/base#hasBibliographicReference
# 
# http://purl.org/vocab/vann/preferredNamespacePrefix
# 
# http://purl.org/vocab/vann/preferredNamespaceUri
# 
# http://www.w3.org/2004/02/skos/core#prefLabel
# 
# 
# 
# #################################################################
# #
# #    Object Properties
# #
# #################################################################
# 
# 
# http://purl.org/neao/base#hasInput
# 
# http://purl.org/neao/base#hasOutput
# 
# http://purl.org/neao/base#hasSource
# 
# http://purl.org/neao/base#hasSubstep
# 
# http://purl.org/neao/base#isImplementedIn
# 
# http://purl.org/neao/base#isImplementedInPackage
# 
# http://purl.org/neao/base#isRepresentedAs
# 
# http://purl.org/neao/base#usesParameter
# 
# 
# 
# #################################################################
# #
# #    Data properties
# #
# #################################################################
# 
# 
# http://purl.org/neao/base#nameInDefinition
# 
# http://purl.org/neao/base#packageName
# 
# http://purl.org/neao/base#packageVersion
# 
# http://purl.org/neao/base#programName
# 
# http://purl.org/neao/base#version
# 
# 
# 
# #################################################################
# #
# #    Classes
# #
# #################################################################
# 
# 
# http://purl.org/neao/base#AnalysisParameter
# 
# http://purl.org/neao/base#AnalysisStep
# 
# http://purl.org/neao/base#Data
# 
# http://purl.org/neao/base#DataRepresentation
# 
# http://purl.org/neao/base#ElectrophysiologySignalSource
# 
# http://purl.org/neao/base#Function
# 
# http://purl.org/neao/base#Program
# 
# http://purl.org/neao/base#SoftwareImplementation
# 
# http://purl.org/neao/base#SoftwarePackage
# 
# http://purl.org/spar/biro/BibliographicReference
# 
# 
# 
# #################################################################
# #
# #    General axioms
# #
# #################################################################
# 
# 
# 
# Generated by the OWL API (version 4.5.26.2023-07-17T20:34:13Z) https://github.com/owlcs/owlapi

<#> a owl:Ontology;
  owl:versionIRI <0.1.0/base#>;
  dcterms:created "2022-01-19";
  dcterms:creator "Cristiano KÃ¶hler (ORCID: 0000-0003-0503-5264)", "Michael Denker (ORCID: 0000-0003-1255-7300)";
  dcterms:license <https://creativecommons.org/licenses/by/4.0/>;
  vann:preferredNamespacePrefix "neao_base";
  vann:preferredNamespaceUri "http://purl.org/neao/base#";
  rdfs:comment """This module contains the core classes of the Neuroelectrophysiology Analysis Ontology (NEAO) model.

The NEAO ontology model is constructed upon the central AnalysisStep class, that represents any process that generates new data entities (e.g., generating artificial spike trains) or performs specific operations aimed at extracting additional information during the analysis using existing data entities. For example, a time series with the raw signal recorded from an electrode can be low-pass filtered to extract the local field potential (LFP) component (the step produces transformed data). Additionaly, this new time series with the LFP data can be used in another step to compute the power spectral density (the step produces new, derived data). Therefore, every stage of the analysis generates new data or applies particular operations to data entities.

The inputs and outputs of the analysis steps are represented by the Data class. This represents any entity storing information needed throughout the analysis. It might represent the data created or transformed by an analysis step, or it can represent data from an electrophysiological recording obtained from neural tissue (or comparable data generated by a simulation). For example, the raw signal time series saved by the recording apparatus, the filtered LFP time series, and the array holding the power spectral density estimates are instances of the Data class.

An information entity that regulates the behavior of the analysis step is a parameter, and is represented by the AnalysisParameter class. A parameter does not provide data that is used by the step to produce the output. For example, in a low-pass filtering step in the analysis to produce the LFP, the time series with the raw wideband signal is the data input, and the low-pass frequency cutoff frequency value is a parameter.

The three core classes are related by the object properties hasInput, hasOutput, and usesParameter. Furthermore, several annotation properties are used to provide clear and unambiguous descriptions of the entities represented by the classes. These include abbreviations (abbreviation property), bibliographic references (hasBibliographicReference), labels (SKOS prefLabel and altLabel properties) and the class description (using RDFS comment property).

The specific analysis method used in a step of the analysis can be implemented by different software codes, such as distinct open-source toolboxes that are available to analyze electrophysiology data. The core NEAO model has two classes describing the software implementation of the analysis step. The main source of the code used to execute the operations involved in the analysis step is represented by the SoftwareImplementation class. This is the code that take any given data input, transform it, and produce the desired results. The SoftwarePackage class is used to describe collections of software, such as toolboxes with many functionality for neuroelectrophysiology data analysis (i.e., that bundle together different pieces of code). The relationship between SoftwareImplementation and SoftwarePackage is established with the property isImplementedInPackage. The relationship between the AnalysisStep and SoftwareImplementation is defined using the isImplementedIn property. The details of the individuals of each class are provided by distinct properties. The version property of SoftwareImplementation is used to define the version of the software.  The packageName and packageVersion properties of SoftwarePackage specify the package name and version, respectively. 

Program and Function are two subclasses of SoftwareImplementation that correspond to the two main approaches used to implement the code for an analysis step. The entity represented by Program is an executable that has been compiled or a complete script that the operating system can call to perform the analysis step (for example, an executable that reads a file, computes the power spectral density using the Welch technique, and saves a file containing the power spectral density). The entity represented by Function is a small, reusable code that is used as a building block in larger programs that execute several steps in the analysis. Specific details of these two forms of implementing software are defined using additional properties. The nameInDefinition property in Function specifies the name that is used in the function declaration and in applications that utilize the function code. The programName property of Program specifies the name of the program as published.

Finally, although NEAO does not aim to model the data acquisition or to give more details of the source and format of the data utilized in the analysis, two classes are defined as abstractions to organize additional information on the entities of the Data class. Data source information can be defined with the ElectrophysiologySignalSource class. For example, this could be used to describe the recording channel, the anatomical features, or the recording technique (e.g., extracellular recording or EEG). Details on the data's structure, which are important for understanding the analysis, can described with the DataRepresentation class. For example, when computing the Pearson correlation coefficient between two binned spike trains, one scalar value is obtained if the input is a pair of spike trains. However, if that analysis step takes a set of binned spike trains, the output could contain a matrix with all the pairwise coefficients computed. These classes are related to the AnalysisStep class using the hasSource and isRepresentedAs properties."""@en;
  rdfs:label "Neuroelectrophysiology Analysis Ontology - Base classes"@en;
  owl:versionInfo "0.1.0" .

dcterms:created a owl:AnnotationProperty .

dcterms:creator a owl:AnnotationProperty .

dcterms:license a owl:AnnotationProperty .

:abbreviation a owl:AnnotationProperty;
  rdfs:comment "A string defining an abbreviation that is frequently used to refer to individuals represented by the class."@en;
  skos:prefLabel "abbreviation"@en;
  rdfs:range xsd:string .

:hasBibliographicReference a owl:AnnotationProperty;
  rdfs:comment "Defines the bibliographic reference associated with the entity. The bibliographic reference should contain the details represented by the entity (e.g., method description, software publication)."@en;
  skos:prefLabel "has bibliographic reference"@en;
  rdfs:range biro:BibliographicReference .

vann:preferredNamespacePrefix a owl:AnnotationProperty .

vann:preferredNamespaceUri a owl:AnnotationProperty .

skos:prefLabel a owl:AnnotationProperty .

:hasInput a owl:ObjectProperty;
  rdfs:domain :AnalysisStep;
  rdfs:range :Data;
  rdfs:comment "Defines a data entity that is used to provide information for one analysis step. The analysis step will make use of this information and produce zero or more data entities as outputs."@en;
  skos:prefLabel "has input"@en .

:hasOutput a owl:ObjectProperty;
  rdfs:domain :AnalysisStep;
  rdfs:range :Data;
  rdfs:comment "Defines a data entity that was produced by an analysis step. This can be newly data generated by the analysis step, or derived data, based on one or more data inputs."@en;
  skos:prefLabel "has output"@en .

:hasSource a owl:ObjectProperty;
  rdfs:domain :Data;
  rdfs:range :ElectrophysiologySignalSource;
  rdfs:comment "Defines the electrophysiology signal source associated with the data entity. One example of use is to define if the data holds a signal obtained by extracellular recordings, or a more specific description involving anatomical structures together with the recording technique."@en;
  skos:prefLabel "has source"@en .

:hasSubstep a owl:ObjectProperty;
  rdfs:domain :AnalysisStep;
  rdfs:range :AnalysisStep;
  rdfs:comment "Points to an analysis step that is part of a (larger) compound analysis, represented by the subject with the property."@en;
  skos:prefLabel "has substep"@en .

:isImplementedIn a owl:ObjectProperty;
  rdfs:domain :AnalysisStep;
  rdfs:range :SoftwareImplementation;
  rdfs:comment "Defines the code source that implemented the analysis step."@en;
  skos:prefLabel "is implemented in"@en .

:isImplementedInPackage a owl:ObjectProperty;
  rdfs:domain :SoftwareImplementation;
  rdfs:range :SoftwarePackage;
  rdfs:comment "Defines the software package that contains a particular code."@en;
  skos:prefLabel "is implemented in package"@en .

:isRepresentedAs a owl:ObjectProperty;
  rdfs:domain :Data;
  rdfs:range :DataRepresentation;
  rdfs:comment "Defines how the data entity is represented to be used by software (e.g., data array, list, file)"@en;
  skos:prefLabel "is represented as"@en .

:usesParameter a owl:ObjectProperty;
  rdfs:domain :AnalysisStep;
  rdfs:range :AnalysisParameter;
  rdfs:comment "Defines a parameter used by the analysis step."@en;
  skos:prefLabel "uses parameter"@en .

:nameInDefinition a owl:DatatypeProperty;
  rdfs:domain :Function;
  rdfs:range xsd:string;
  rdfs:comment "Specifies the name of the function as it is defined in the code that implemented it. For example, for Python functions, this is what is specified in the 'def' statement (i.e., def function_name(arg), the value of this property is function_name)."@en;
  skos:prefLabel "name in definition"@en .

:packageName a owl:DatatypeProperty;
  rdfs:domain :SoftwarePackage;
  rdfs:range rdfs:Literal;
  rdfs:comment "Version of the software package."@en;
  skos:prefLabel "package version"@en .

:packageVersion a owl:DatatypeProperty;
  rdfs:domain :SoftwarePackage;
  rdfs:range rdfs:Literal;
  rdfs:comment "Specifies the version of the package, as defined by the string used when it was released."@en;
  skos:prefLabel "package version"@en .

:programName a owl:DatatypeProperty;
  rdfs:domain :Program;
  rdfs:range xsd:string;
  rdfs:comment "Defines the name of the program."@en;
  skos:prefLabel "program name"@en .

:version a owl:DatatypeProperty;
  rdfs:domain :SoftwareImplementation;
  rdfs:range rdfs:Literal;
  rdfs:comment "Version of the code for a specific program or function. This can be used to define a specific version for the code of a single function or program within a software package."@en;
  skos:prefLabel "version"@en .

:AnalysisParameter a owl:Class;
  rdfs:comment "An information entity that controls the behavior of an analysis step. It does not provide data, but rather changes how the computations operate when transforming or generating new data."@en;
  skos:prefLabel "parameter"@en .

:AnalysisStep a owl:Class;
  rdfs:comment "A process that generates new data entities or performs specific operations (clean, select, transform, or inspect/visualize) using existing data entities. Ultimately, the goal is to obtain useful information from the data. An analysis step can take zero or more data inputs and can generate one or more data outputs. The behavior of the operation can optionally be controlled by one or more parameters. A complete analysis is composed by one or more analysis steps."@en;
  skos:prefLabel "analysis step"@en .

:Data a owl:Class;
  rdfs:comment "An entity that represents a piece of data, i.e., relevant information, during the analysis. It can be recorded from a biological entity or from a simulation yielding comparable data, or it can be generated/transformed by other analysis step processes."@en;
  skos:prefLabel "data"@en .

:DataRepresentation a owl:Class;
  rdfs:comment "Defines the formal structure to represent a piece of data."@en;
  skos:prefLabel "data representation"@en .

:ElectrophysiologySignalSource a owl:Class;
  rdfs:comment """Defines the source of a recorded piece of electrophysiology data, i.e., the recorded signals. This is a general concept, that can be expanded to incorporate the anatomical/tissue description from where the signal was recorded, as well as the recording technique.

For example, voltage potentials can be acquired from extracellular electrodes situtated on the scalp (electroencephalogram), directly on the cortical surface (electrocorticogram) or implanted deep into a specific brain region (multielectrode array)."""@en;
  skos:prefLabel "electrophysiology signal source"@en .

:Function a owl:Class;
  rdfs:subClassOf :SoftwareImplementation;
  rdfs:comment "A reusable set of instructions that can be used when writing computer programs. A function performs specific tasks, and can be implemented as part of a single computer program or in a software package (library) so that it can be reused across several programs."@en;
  skos:prefLabel "function"@en .

:Program a owl:Class;
  rdfs:subClassOf :SoftwareImplementation;
  rdfs:comment "A set of instructions that is executed by a computer. The instructions of the program can be executed by an interpreter or compiled to machine code. The program instructs the computer to perform tasks and it is called by the operating system."@en;
  skos:prefLabel "program"@en .

:SoftwareImplementation a owl:Class;
  owl:disjointWith :SoftwarePackage;
  rdfs:comment "Describes the details for the execution of the analysis step using a computer. The software contains a sequence or set of instructions that is used by the computer to perform all the computations required to execute the analysis step."@en;
  skos:prefLabel "software implementation"@en .

:SoftwarePackage a owl:Class;
  rdfs:comment "A collection of one or more programs that can be executed by a computer and/or one or more functions that can be imported and used when writing programs."@en;
  skos:prefLabel "software package"@en .

biro:BibliographicReference a owl:Class .

_:genid1 a owl:AllDisjointClasses;
  owl:members _:genid4 .

_:genid4 a rdf:List;
  rdf:first :AnalysisParameter;
  rdf:rest _:genid3 .

_:genid3 a rdf:List;
  rdf:first :AnalysisStep;
  rdf:rest _:genid2 .

_:genid2 a rdf:List;
  rdf:first :Data;
  rdf:rest rdf:nil .
